#include "xparameters.h"
#include "xstatus.h"
#include "xintc.h"
#include "xil_exception.h"
#include "my_seg_show_ip.h"
#include "my_snake_game_ip.h"
#include "sleep.h"
#include "xil_printf.h"

void DeviceDriverHandler(void *CallbackRef);
void fixed_timer_intr_init(u16 DeviceId);

#define MY_SNAKE_GAME_IP_BASE_ADDR XPAR_MY_SNAKE_GAME_IP_0_S0_AXI_BASEADDR

#define BTN_OFFSET MY_SNAKE_GAME_IP_S0_AXI_SLV_REG0_OFFSET
#define SW_OFFSET  MY_SNAKE_GAME_IP_S0_AXI_SLV_REG2_OFFSET
#define RES_OFFSET MY_SNAKE_GAME_IP_S0_AXI_SLV_REG1_OFFSET
#define EN_OFFSET MY_SNAKE_GAME_IP_S0_AXI_SLV_REG3_OFFSET

#define INTC_DEVICE_INT_ID	  XPAR_AXI_INTC_0_FIT_TIMER_0_INTERRUPT_INTR
#define INTC_DEVICE_ID		  XPAR_INTC_0_DEVICE_ID

XIntc INTC;

#define LED (*((u32*)0x40000000))
#define LEDT (*((u32*)0x40000004))
#define BTN (*((u32*)0x40000008))
#define BTNT (*((u32*)0x4000000C))

int main()
{
	u8 val;
	u16 i;
	print("my_snake_game!\r\n");
	BTNT = 0xff ;
	LEDT = 0x00;
	val=(u8)BTN;
	MY_SNAKE_GAME_IP_mWriteReg(MY_SNAKE_GAME_IP_BASE_ADDR, SW_OFFSET,((val&0x20)!=0));

	MY_SNAKE_GAME_IP_mWriteReg(MY_SNAKE_GAME_IP_BASE_ADDR,EN_OFFSET,1);
	while(1)
	{
		val=(u8)BTN;
		MY_SNAKE_GAME_IP_mWriteReg(MY_SNAKE_GAME_IP_BASE_ADDR, RES_OFFSET,(val&0x10)!=0);
		MY_SNAKE_GAME_IP_mWriteReg(MY_SNAKE_GAME_IP_BASE_ADDR, BTN_OFFSET,(val&0x0f));
		if(++i==500)
		{
			print("my_snake_game!\r\n");
			i=0;
			LED=~LED;
		}
		usleep(1000);
	}
	return 0;
}


void fixed_timer_intr_init(u16 DeviceId)
{
	XIntc_Initialize(&INTC, DeviceId);

	XIntc_Connect(&INTC, INTC_DEVICE_INT_ID,
					  (XInterruptHandler)DeviceDriverHandler,
					   (void *)0);

	XIntc_Start(&INTC, XIN_REAL_MODE);
	XIntc_Enable(&INTC, INTC_DEVICE_INT_ID);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler)XIntc_InterruptHandler,
				&INTC);
	Xil_ExceptionEnable();
}

volatile static int InterruptProcessed = FALSE;
void DeviceDriverHandler(void *CallbackRef)
{

	    InterruptProcessed = TRUE;
	 	xil_printf("Successfully ran Intc Example\r\n");

}



